//sync - solidity
//async - javascript

//sync: cook -> wait for finish cooking -> pour drinks -> serve
//promise
//pending
//fulfilled
//rejected
//async: cook -> instead of waiting, pour drinks > serve
const ethers = require("ethers");
const fs = require("fs-extra");
require("dotenv").config();

async function main() {
  const provider = new ethers.providers.JsonRpcProvider(process.env.RPC_URL);
    // const encryptedKey = fs.readFileSync("./.encryptedKey.json", "utf-8");
    // const wallet = new ethers.Wallet.fromEncryptedJsonSync(
    //   encryptedKey,
    //   process.env.PASS_ENCRYPT
    // )
    // wallet = await wallet.connect(provider);


  const wallet = new ethers.Wallet(process.env.PRIVATE_KEY, provider);
  const abi = fs.readFileSync("./SimpleStorage_sol_SimpleStorage.abi", "utf-8");
  const binary = fs.readFileSync("./SimpleStorage_sol_SimpleStorage.bin", "utf-8");
  const contractFactory = new ethers.ContractFactory(abi, binary, wallet);
  const contract = await contractFactory.deploy();
  await contract.deployTransaction.wait(1);
  console.log(`contract: ${contract.address}`);
  
  // const nonce = await wallet.getTransactionCount();
  // const tx = {
  //   nonce: 5,
  //   gasPrice: 20000000000,
  //   gasLimit: 6721975,
  //   to: null,
  //   value: 0,
  //   data: "0x60806040526040518060400160405280600281526020016040518060400160405280600781526020017f426f6c626f6e6100000000000000000000000000000000000000000000000000815250815250600160008201518160000155602082015181600101908162000072919062000303565b5050503480156200008257600080fd5b50620003ea565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200010b57607f821691505b602082108103620001215762000120620000c3565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026200018b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826200014c565b6200019786836200014c565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000620001e4620001de620001d884620001af565b620001b9565b620001af565b9050919050565b6000819050919050565b6200020083620001c3565b620002186200020f82620001eb565b84845462000159565b825550505050565b600090565b6200022f62000220565b6200023c818484620001f5565b505050565b5b8181101562000264576200025860008262000225565b60018101905062000242565b5050565b601f821115620002b3576200027d8162000127565b62000288846200013c565b8101602085101562000298578190505b620002b0620002a7856200013c565b83018262000241565b50505b505050565b600082821c905092915050565b6000620002d860001984600802620002b8565b1980831691505092915050565b6000620002f38383620002c5565b9150826002028217905092915050565b6200030e8262000089565b67ffffffffffffffff8111156200032a576200032962000094565b5b620003368254620000f2565b6200034382828562000268565b600060209050601f8311600181146200037b576000841562000366578287015190505b620003728582620002e5565b865550620003e2565b601f1984166200038b8662000127565b60005b82811015620003b5578489015182556001820191506020850194506020810190506200038e565b86831015620003d55784890151620003d1601f891682620002c5565b8355505b6001600288020188555050505b505050505050565b610b0f80620003fa6000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80638f7d59b81161005b5780638f7d59b81461010457806392fa9da3146101205780639e7a13ad14610150578063c7a0d9f61461018157610088565b80632e64cec11461008d5780634f2be91f146100ab5780636057361d146100c957806377ec2b55146100e5575b600080fd5b61009561019f565b6040516100a29190610406565b60405180910390f35b6100b36101a8565b6040516100c09190610406565b60405180910390f35b6100e360048036038101906100de9190610461565b6101b1565b005b6100ed6101d2565b6040516100fb929190610527565b60405180910390f35b61011e6004803603810190610119919061068c565b61026c565b005b61013a600480360381019061013591906106e8565b6102fd565b6040516101479190610406565b60405180910390f35b61016a60048036038101906101659190610461565b61032b565b604051610178929190610527565b60405180910390f35b6101896103e7565b6040516101969190610406565b60405180910390f35b60008054905090565b60006002905090565b806000819055506000808154809291906101ca90610760565b919050555050565b60018060000154908060010180546101e9906107d7565b80601f0160208091040260200160405190810160405280929190818152602001828054610215906107d7565b80156102625780601f1061023757610100808354040283529160200191610262565b820191906000526020600020905b81548152906001019060200180831161024557829003601f168201915b5050505050905082565b60006040518060400160405280600054815260200183815250905060038190806001815401808255809150506001900390600052602060002090600202016000909190919091506000820151816000015560208201518160010190816102d291906109b4565b505050826004836040516102e69190610ac2565b908152602001604051809103902081905550505050565b6004818051602081018201805184825260208301602085012081835280955050505050506000915090505481565b6003818154811061033b57600080fd5b9060005260206000209060020201600091509050806000015490806001018054610364906107d7565b80601f0160208091040260200160405190810160405280929190818152602001828054610390906107d7565b80156103dd5780601f106103b2576101008083540402835291602001916103dd565b820191906000526020600020905b8154815290600101906020018083116103c057829003601f168201915b5050505050905082565b60005481565b6000819050919050565b610400816103ed565b82525050565b600060208201905061041b60008301846103f7565b92915050565b6000604051905090565b600080fd5b600080fd5b61043e816103ed565b811461044957600080fd5b50565b60008135905061045b81610435565b92915050565b6000602082840312156104775761047661042b565b5b60006104858482850161044c565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156104c85780820151818401526020810190506104ad565b838111156104d7576000848401525b50505050565b6000601f19601f8301169050919050565b60006104f98261048e565b6105038185610499565b93506105138185602086016104aa565b61051c816104dd565b840191505092915050565b600060408201905061053c60008301856103f7565b818103602083015261054e81846104ee565b90509392505050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610599826104dd565b810181811067ffffffffffffffff821117156105b8576105b7610561565b5b80604052505050565b60006105cb610421565b90506105d78282610590565b919050565b600067ffffffffffffffff8211156105f7576105f6610561565b5b610600826104dd565b9050602081019050919050565b82818337600083830152505050565b600061062f61062a846105dc565b6105c1565b90508281526020810184848401111561064b5761064a61055c565b5b61065684828561060d565b509392505050565b600082601f83011261067357610672610557565b5b813561068384826020860161061c565b91505092915050565b600080604083850312156106a3576106a261042b565b5b60006106b18582860161044c565b925050602083013567ffffffffffffffff8111156106d2576106d1610430565b5b6106de8582860161065e565b9150509250929050565b6000602082840312156106fe576106fd61042b565b5b600082013567ffffffffffffffff81111561071c5761071b610430565b5b6107288482850161065e565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061076b826103ed565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361079d5761079c610731565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806107ef57607f821691505b602082108103610802576108016107a8565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b60006008830261086a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8261082d565b610874868361082d565b95508019841693508086168417925050509392505050565b6000819050919050565b60006108b16108ac6108a7846103ed565b61088c565b6103ed565b9050919050565b6000819050919050565b6108cb83610896565b6108df6108d7826108b8565b84845461083a565b825550505050565b600090565b6108f46108e7565b6108ff8184846108c2565b505050565b5b81811015610923576109186000826108ec565b600181019050610905565b5050565b601f8211156109685761093981610808565b6109428461081d565b81016020851015610951578190505b61096561095d8561081d565b830182610904565b50505b505050565b600082821c905092915050565b600061098b6000198460080261096d565b1980831691505092915050565b60006109a4838361097a565b9150826002028217905092915050565b6109bd8261048e565b67ffffffffffffffff8111156109d6576109d5610561565b5b6109e082546107d7565b6109eb828285610927565b600060209050601f831160018114610a1e5760008415610a0c578287015190505b610a168582610998565b865550610a7e565b601f198416610a2c86610808565b60005b82811015610a5457848901518255600182019150602085019450602081019050610a2f565b86831015610a715784890151610a6d601f89168261097a565b8355505b6001600288020188555050505b505050505050565b600081905092915050565b6000610a9c8261048e565b610aa68185610a86565b9350610ab68185602086016104aa565b80840191505092915050565b6000610ace8284610a91565b91508190509291505056fea2646970667358221220139e5fd58c55c91f688a2d8fbe98bc6a1557f7657868b56c6393afd52ebb96ee64736f6c634300080f0033",
  //   chainId: 1337,
  // };

  // const signedTxResponse = await wallet.sendTransaction(tx);
  // await signedTxResponse.wait(1);
  // console.log(signedTxResponse);

  //getNumber
  let favNumber = await contract.retrieve();
  console.log(favNumber.toString());

  const transactionResponse = await contract.store("5");
  const transactionReceipt = await transactionResponse.wait(1);
  favNumber = await contract.retrieve();
  console.log(`updated fav num: ${favNumber}`);
}

main()
  .then(() => process.exit(0))
  .catch((err) => {
    console.error(err);
    process.exit(1);
  });